@page "/tecnicos"
@using RegistrosTecnicos.Models
@using System.ComponentModel.DataAnnotations
@inject TecnicosService TecnicosService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime


<h1>Registro Técnicos</h1>

<div class="mb-3">
    <h5>Filtrar por</h5>
    <div class="input-group">
        <input @bind="filtroNombre" class="form-control" placeholder="Buscar por nombre" />
        <button class="btn btn-primary" @onclick="BuscarTecnicos">Buscar</button>
    </div>
</div>

@if (tecnicos == null)
{
    <p>Cargando...</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>TecnicoId</th>
                <th>Nombre</th>
                <th>Sueldo</th>
                <th>Editar</th>
                <th>Borrar</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var tecnico in tecnicos)
            {
                <tr>
                    <td>@tecnico.TecnicoId</td>
                    <td>@tecnico.Nombre</td>
                    <td>@tecnico.SueldoHora.ToString("N2")</td>
                    <td>
                        <button class="btn btn-sm btn-outline-primary" @onclick="() => EditarTecnico(tecnico.TecnicoId)">✔</button>
                    </td>
                    <td>
                        <button class="btn btn-sm btn-outline-danger" @onclick="() => EliminarTecnico(tecnico.TecnicoId)">🗑️</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div class="mt-3">
        <button class="btn btn-success" @onclick="CrearNuevoTecnico">+ Nuevo</button>
    </div>
}

@code {
    private List<RegistrosTecnicos.Models.Tecnico>? tecnicos;
    private string filtroNombre = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await CargarTecnicos();
    }

    private async Task CargarTecnicos()
    {
        tecnicos = await TecnicosService.Listar(t => string.IsNullOrEmpty(filtroNombre) ||
                                           t.Nombre.Contains(filtroNombre));
    }

    private async Task BuscarTecnicos()
    {
        await CargarTecnicos();
    }

    private void CrearNuevoTecnico()
    {
        Navigation.NavigateTo("/tecnicos/crear");
    }

    private void EditarTecnico(int tecnicoId)
    {
        Navigation.NavigateTo($"/tecnicos/editar/{tecnicoId}");
    }

    private async Task EliminarTecnico(int tecnicoId)
    {
        bool confirmado = await JSRuntime.InvokeAsync<bool>("confirm", "¿Está seguro de eliminar este técnico?");
        if (confirmado)
        {
            await TecnicosService.Eliminar(tecnicoId);
            await CargarTecnicos();
        }
    }
}